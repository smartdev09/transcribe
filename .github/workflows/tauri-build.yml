name: Build Desktop App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Intel
          - platform: "macos-latest"
            args: '--target x86_64-apple-darwin --features "server"'
            target: x86_64-apple-darwin
            name: macos-intel
            
          # macOS Apple Silicon
          - platform: "macos-latest" 
            args: '--target aarch64-apple-darwin --features "server"'
            target: aarch64-apple-darwin
            name: macos-arm64
            
          # Ubuntu Linux
          - platform: "ubuntu-22.04"
            args: '--features "vulkan,server"'
            pre-build-args: "--vulkan"
            name: linux-x64
            
          # Windows
          - platform: "windows-latest"
            args: '--target x86_64-pc-windows-msvc --features "vulkan,server"'
            pre-build-args: "--vulkan" 
            target: x86_64-pc-windows-msvc
            name: windows-x64

    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Setup Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            core -> target
            desktop/src-tauri -> target

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Platform-specific dependencies
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Prepare Vulkan SDK (Linux)
        if: contains(matrix.platform, 'ubuntu-22.04') && contains(matrix.args, 'vulkan')
        run: |
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.290-jammy.list https://packages.lunarg.com/vulkan/1.3.290/lunarg-vulkan-1.3.290-jammy.list
          sudo apt update
          sudo apt install vulkan-sdk -y
          sudo apt-get install -y mesa-vulkan-drivers

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: bun install
        working-directory: ./desktop

      # Run pre-build script
      - name: Run pre-build script
        if: matrix.pre-build-args
        run: bun scripts/pre_build.js ${{ matrix.pre-build-args }}

      - name: Run pre-build script (no args)
        if: "!matrix.pre-build-args"
        run: bun scripts/pre_build.js

      # Build the app
      - name: Build Tauri app
        run: |
          cd desktop
          bun run tauri build ${{ matrix.args }}
        env:
          # Add any necessary environment variables
          RUST_BACKTRACE: ${{ github.event.inputs.debug == 'true' && '1' || '0' }}

      # Upload artifacts
      - name: Upload build artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-artifacts
          path: |
            desktop/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            desktop/src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app
          retention-days: 7

      - name: Upload build artifacts (Linux)
        if: matrix.platform == 'ubuntu-22.04' 
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-artifacts
          path: |
            desktop/src-tauri/target/release/bundle/deb/*.deb
            desktop/src-tauri/target/release/bundle/rpm/*.rpm
            desktop/src-tauri/target/release/bundle/appimage/*.AppImage
          retention-days: 7

      - name: Upload build artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-artifacts  
          path: |
            desktop/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
            desktop/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
          retention-days: 7

  # Summary job that depends on all builds
  build-summary:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check build results
        run: |
          echo "Build Summary:"
          echo "=============="
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ All platform builds completed successfully!"
          else
            echo "❌ Some builds failed. Check the individual job logs."
            exit 1
          fi 
